{"version":3,"sources":["Test.js","App.js","serviceWorker.js","index.js"],"names":["Image","image","alt","src","title","className","Genre","genre","prototype","genres","PropTypes","string","isRequired","Test","synopsis","map","index","key","text","maxLine","ellipsis","trimRight","basedOn","App","state","greeting","_renderObjects","objects","object","console","log","title_english","medium_cover_image","id","_getObjects","a","_callApi","setState","fetch","then","response","json","data","movies","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uWAiFA,SAASA,EAAT,GAAgC,IAAfC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,IAEpB,OACI,yBAAKC,IAAKF,EAAOC,IAAKA,EAAKE,MAAOF,EAAKG,UAAU,iBAMzD,SAASC,EAAT,GAA2B,IAAVC,EAAS,EAATA,MACb,OACI,0BAAMF,UAAU,gBAAhB,IAAiCE,EAAjC,MAmBRD,EAAME,UAAY,CACdC,OAAQC,IAAUC,OAAOC,YAGdC,MAhEf,YAAmD,IAAnCT,EAAkC,EAAlCA,MAAOH,EAA2B,EAA3BA,MAAOQ,EAAoB,EAApBA,OAAQK,EAAY,EAAZA,SAClC,OACI,yBAAKT,UAAU,SACX,yBAAKA,UAAU,iBACX,kBAACL,EAAD,CAAOC,MAAOA,EAAOC,IAAKE,KAG9B,yBAAKC,UAAU,iBACX,4BAAKD,GACL,yBAAKC,UAAU,gBACVI,EAAOM,KAAI,SAACR,EAAOS,GAAR,OAAkB,kBAACV,EAAD,CAAOC,MAAOA,EAAOU,IAAKD,QAE5D,yBAAKX,UAAU,kBACf,kBAAC,IAAD,CACIa,KAAMJ,EACNK,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCwFbC,E,2MA9HbC,MAAQ,CACNC,SAAU,U,EA6DZC,eAAiB,WAaf,OAZgB,EAAKF,MAAMG,QAAQZ,KAAI,SAAAa,GAIrC,OAFAC,QAAQC,IAAIF,GAEL,kBAAC,EAAD,CAAMxB,MAAOwB,EAAOG,cACzB9B,MAAO2B,EAAOI,mBACdvB,OAAQmB,EAAOnB,OACfQ,IAAKW,EAAOK,GACZnB,SAAUc,EAAOd,e,EAUvBoB,Y,sBAAc,4BAAAC,EAAA,sEACU,EAAKC,WADf,OACNT,EADM,OAGZ,EAAKU,SAAS,CACZV,YAJU,2C,EAQdS,SAAW,WAET,OAAOE,MAAM,6DACVC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKC,UACvBC,OAAM,SAAAC,GAAG,OAAIhB,QAAQC,IAAIe,O,mFArC5BC,KAAKZ,gB,+BA2CG,IACAP,EAAWmB,KAAKtB,MAAhBG,QAER,OAeI,yBAAKtB,UAAWsB,EAAU,MAAQ,gBAC/BmB,KAAKtB,MAAMG,QAAUmB,KAAKpB,iBAAmB,e,GA/HtCqB,aCXEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.531fce43.chunk.js","sourcesContent":["import React/* , { Component } */ from 'react';\nimport PropTypes from 'prop-types';\nimport LineEllipsis from 'react-lines-ellipsis'\nimport './Test.css';\n\n/*\n\nclass Test extends Component {\n\n    static propTypes = {\n        //-> 들어오는 data type이 어떤거야 하는지 확인해줌 \n        //-> father로부터 어떤 prop을 받는지 확인\n             // => 개발자모드에서 확인 가능\n        order: PropTypes.string.isRequired, //-> required 속성도 줄 수 있음\n        image: PropTypes.string\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Image image={this.props.image}/>\n                <h1>{this.props.order}</h1>\n            </div>\n        )\n    }\n}\n*/\n\n\n\n/* class Image extends Component {\n\n    static propTypes = {\n        image: PropTypes.string.isRequired\n    }\n\n    render() {\n\n        return (\n            <img src={this.props.image} alt=\"some photos\"/>\n\n        )\n    }\n} */\n\n\n// 위의 Test, Image Component를 function으로 만듦  => because they are dumb (only return one thing)\n// -> Smarter way! as long as it's just for returning one props\n\n\nfunction Test({ title, image, genres, synopsis }) {\n    return (\n        <div className=\"Movie\">\n            <div className=\"Movie_Columns\">\n                <Image image={image} alt={title}/>\n            </div>\n\n            <div className=\"Movie_Columns\">\n                <h2>{title}</h2>\n                <div className=\"Movie_Genres\">\n                    {genres.map((genre, index) => <Genre genre={genre} key={index} />)}\n                </div>\n                <div className=\"Movie_Synopsis\">\n                <LineEllipsis\n                    text={synopsis}\n                    maxLine='3'\n                    ellipsis='...'\n                    trimRight\n                    basedOn='letters'\n                />\n                </div>\n\n            </div>\n\n\n\n        </div>\n    )\n}\n\nfunction Image({ image, alt }) {\n\n    return (\n        <img src={image} alt={alt} title={alt} className=\"Movie_Poster\"/>\n\n    )\n}\n\n\nfunction Genre({ genre }) {\n    return (\n        <span className=\"Movie_Genres\"> {genre}  </span>\n    )\n}\n\n\nTest.propTypes = {\n    title: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    synopsis: PropTypes.string.isRequired\n}\n\n\nImage.propTypes = {\n    image: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired\n}\n\n\nGenre.prototype = {\n    genres: PropTypes.string.isRequired\n}\n\nexport default Test","import React, { Component } from 'react';\nimport './App.css';\nimport Test from './Test';\n\n/*ver1) \n  const orders = [\n  \"first\",\n  \"second\",\n  \"third\",\n  \"forth\",\n  \"fifth\"\n]\n\nconst images = [\n  \"../favicon.ico\",\n  \"../logo192.png\",\n  \"../logo192.png\",\n  \"../graphql.png\",\n  \"../tomcat.png\"\n] */\n\n\n\nclass App extends Component {\n  /*\n  Render: componentWillMount() -> render() -> componentDidMount()\n  \n  Update: componentWillReceiveProps() -> shouldComponentUpdate() => [true] -> componentWillUpdate() -> render() -> componentDidUpdate()\n  */\n\n\n  state = {\n    greeting: \"Hello!\",\n\n  }\n\n  componentDidMount() {\n\n    /* 처음에 data 박고 한 것\n      setTimeout(() => {\n      this.setState({\n        greeting: \"Hello again!\"\n      })\n    }, 5000);\n     */\n\n    /*  setTimeout(() => {\n \n       this.setState({\n         objects: [ */\n\n    /* ...this.state.[] 하지 않으면 덮어 쓰게 됨! */\n    /*         ...this.state.objects, */\n    // -> 기존 array를 보존하면서 추가하겠다는 뜻\n    // -> 이게 추가하는 것의 뒤에 가도 됨! 그럼 기존 array 앞에 추가됨\n    /*     {\n          order: \"sixth\",\n          image: \"../graphql.png\"\n        },\n        {\n          order: \"first\",\n          image: \"../favicon.ico\"\n        },\n        {\n          order: \"second\",\n          image: \"../logo192.png\"\n        },\n\n        {\n          order: \"third\",\n          image: \"../logo512.png\"\n        },\n\n        {\n          order: \"forth\",\n          image: \"../graphql.png\"\n\n        },\n\n        {\n          order: \"fifth\",\n          image: \"../tomcat.png\"\n        }\n      ]\n\n    })\n  }, 2000)\n*/\n    this._getObjects();\n\n  }\n\n\n  _renderObjects = () => {\n    const objects = this.state.objects.map(object => {\n\n      console.log(object)\n\n      return <Test title={object.title_english}\n        image={object.medium_cover_image}\n        genres={object.genres}\n        key={object.id}\n        synopsis={object.synopsis} />\n      //-> title_english이랑 medium_cover_image는 yts.lt/api에 있는 것들이라서 데려올 수 있음!\n    })\n\n    return objects\n  }\n\n\n  // [ async & await ]\n\n  _getObjects = async () => {\n    const objects = await this._callApi()\n    //-> _callApi() 의 return 결과에 상관 없이 complete 될 때까지 기다리고, return value를 objects에 넣겠다\n    this.setState({\n      objects\n    })\n  }\n\n  _callApi = () => {\n    /* fetch를 사용하면 비동기 통신  */\n    return fetch('https://yts.lt/api/v2/list_movies.json?sort_by=like_count')\n      .then(response => response.json())\n      .then(json => json.data.movies)\n      .catch(err => console.log(err))\n    //-> catch 는 에러를 출력함\n\n  }\n\n\n  render() {\n    const { objects} = this.state;\n\n    return (\n      /* 이 안에 있는게 jsx */\n\n        /* \n        ver1)\n\n        <Test title={orders[0]} img={images[0]} />\n        <Test title={orders[1]} img={images[1]} />\n        <Test title={orders[2]} img={images[2]} />\n        <Test title={orders[3]} img={images[3]} />\n        <Test title={orders[4]} img={images[4]} /> \n        */\n\n        /*{this.state.greeting} */\n\n        <div className={objects ? \"App\" : \"App--loading\"}>\n          {this.state.objects ? this._renderObjects() : \"Loading\"}\n        </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}